#!/bin/bash

echo "üöÄ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –•—Ä–æ–º –ö–ó Logistics –Ω–∞ –Ω–æ–≤—ã–π VPS"
echo "==============================================="
echo "–¶–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω: logistics.xrom.org"
echo "–û–°: Ubuntu 22.04 LTS"
echo ""

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[OK]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_info() { echo -e "${YELLOW}[INFO]${NC} $1"; }
print_step() { echo -e "${BLUE}[STEP]${NC} $1"; }

if [[ $EUID -ne 0 ]]; then
   print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo bash fresh_vps_deploy.sh"
   exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Ubuntu
if ! grep -q "22.04" /etc/lsb-release; then
    print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Ubuntu 22.04 LTS"
    print_info "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $(lsb_release -d)"
    exit 1
fi

print_step "–≠–¢–ê–ü 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
apt install -y \
    nginx \
    postgresql \
    postgresql-contrib \
    python3 \
    python3-pip \
    python3-venv \
    git \
    curl \
    ufw \
    certbot \
    python3-certbot-nginx \
    htop \
    nano \
    unzip

print_status "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

print_step "–≠–¢–ê–ü 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if ! id "hromkz" &>/dev/null; then
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è hromkz..."
    useradd -m -s /bin/bash hromkz
    usermod -aG www-data hromkz
    print_status "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å hromkz —Å–æ–∑–¥–∞–Ω"
else
    print_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å hromkz —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

print_step "–≠–¢–ê–ü 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL"

print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
systemctl enable postgresql
systemctl start postgresql

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sudo -u postgres psql << 'EOF'
-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE USER hromkz_user WITH ENCRYPTED PASSWORD 'HromKZ_SecurePass2025!';
ALTER USER hromkz_user CREATEDB;

-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CREATE DATABASE hromkz_logistics OWNER hromkz_user;
GRANT ALL PRIVILEGES ON DATABASE hromkz_logistics TO hromkz_user;

\q
EOF

print_status "PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞"

print_step "–≠–¢–ê–ü 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="/var/www/logistics.xrom.org"
print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"

mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p static/css static/js static/images templates run

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
chown -R hromkz:www-data $PROJECT_DIR
chmod 775 $PROJECT_DIR

print_step "–≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
sudo -u hromkz python3 -m venv $PROJECT_DIR/venv

print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤..."
sudo -u hromkz $PROJECT_DIR/venv/bin/pip install --upgrade pip
sudo -u hromkz $PROJECT_DIR/venv/bin/pip install \
    flask \
    flask-sqlalchemy \
    flask-wtf \
    wtforms \
    werkzeug \
    gunicorn \
    psycopg2-binary \
    requests \
    sqlalchemy \
    email-validator

print_status "Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

print_step "–≠–¢–ê–ü 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
cat > $PROJECT_DIR/.env << 'EOF'
DATABASE_URL=postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics
SESSION_SECRET=HromKZ_Production_Secret_2025_LogisticsSystem_NewVPS
FLASK_ENV=production
TELEGRAM_BOT_TOKEN=
TELEGRAM_ADMIN_ID=
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ app.py..."
cat > $PROJECT_DIR/app.py << 'EOF'
import os
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase
from werkzeug.middleware.proxy_fix import ProxyFix

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)

def create_app():
    app = Flask(__name__)
    app.secret_key = os.environ.get("SESSION_SECRET", "fallback-secret-key")
    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
    app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get(
        "DATABASE_URL", 
        "postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics"
    )
    app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
        "pool_recycle": 300,
        "pool_pre_ping": True,
    }
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    
    db.init_app(app)
    
    # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ app context
    with app.app_context():
        try:
            import models
            logger.info("Models imported successfully")
        except ImportError as e:
            logger.warning(f"Could not import models: {e}")
            
        try:
            import routes
            logger.info("Routes imported successfully")  
        except ImportError as e:
            logger.warning(f"Could not import routes: {e}")
    
    return app

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ main.py..."
cat > $PROJECT_DIR/main.py << 'EOF'
import os
from app import app

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ models.py..."
cat > $PROJECT_DIR/models.py << 'EOF'
from app import db
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

class Employee(db.Model):
    __tablename__ = 'employees'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Request(db.Model):
    __tablename__ = 'requests'
    
    id = db.Column(db.Integer, primary_key=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    sender_name = db.Column(db.String(100), nullable=False)
    sender_phone = db.Column(db.String(20), nullable=False)
    sender_address = db.Column(db.Text, nullable=False)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    recipient_name = db.Column(db.String(100), nullable=False)
    recipient_phone = db.Column(db.String(20), nullable=False)
    recipient_address = db.Column(db.Text, nullable=False)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ
    cargo_description = db.Column(db.Text, nullable=False)
    cargo_weight = db.Column(db.Float)
    cargo_value = db.Column(db.Float)
    
    # –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å
    delivery_type = db.Column(db.String(20), nullable=False)  # 'astana' –∏–ª–∏ 'regional'
    status = db.Column(db.String(20), default='pending')  # pending, confirmed, in_transit, delivered
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    notes = db.Column(db.Text)
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ forms.py..."
cat > $PROJECT_DIR/forms.py << 'EOF'
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, FloatField, SelectField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, Length, Optional
from email_validator import validate_email

class EmployeeRegistrationForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired(), Length(min=3, max=80)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired(), Length(min=6)])
    submit = SubmitField('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')

class EmployeeLoginForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired()])
    submit = SubmitField('–í–æ–π—Ç–∏')

class RequestForm(FlaskForm):
    # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    sender_name = StringField('–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', validators=[DataRequired(), Length(max=100)])
    sender_phone = StringField('–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', validators=[DataRequired(), Length(max=20)])
    sender_address = TextAreaField('–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', validators=[DataRequired()])
    
    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å
    recipient_name = StringField('–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è', validators=[DataRequired(), Length(max=100)])
    recipient_phone = StringField('–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è', validators=[DataRequired(), Length(max=20)])
    recipient_address = TextAreaField('–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è', validators=[DataRequired()])
    
    # –ì—Ä—É–∑
    cargo_description = TextAreaField('–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞', validators=[DataRequired()])
    cargo_weight = FloatField('–í–µ—Å (–∫–≥)', validators=[Optional()])
    cargo_value = FloatField('–°—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞ (—Ç–µ–Ω–≥–µ)', validators=[Optional()])
    
    # –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type = SelectField('–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', 
                               choices=[('astana', '–ü–æ –ê—Å—Ç–∞–Ω–µ'), ('regional', '–ú–µ–∂–≥–æ—Ä–æ–¥')],
                               validators=[DataRequired()])
    
    submit = SubmitField('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')

class TrackingForm(FlaskForm):
    phone = StringField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', validators=[DataRequired(), Length(max=20)])
    submit = SubmitField('–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏')
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ routes.py..."
cat > $PROJECT_DIR/routes.py << 'EOF'
from flask import render_template, request, redirect, url_for, flash, session
from app import app, db
from models import Employee, Request
from forms import EmployeeRegistrationForm, EmployeeLoginForm, RequestForm, TrackingForm

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/request', methods=['GET', 'POST'])
def create_request():
    form = RequestForm()
    if form.validate_on_submit():
        new_request = Request(
            sender_name=form.sender_name.data,
            sender_phone=form.sender_phone.data,
            sender_address=form.sender_address.data,
            recipient_name=form.recipient_name.data,
            recipient_phone=form.recipient_phone.data,
            recipient_address=form.recipient_address.data,
            cargo_description=form.cargo_description.data,
            cargo_weight=form.cargo_weight.data,
            cargo_value=form.cargo_value.data,
            delivery_type=form.delivery_type.data
        )
        
        db.session.add(new_request)
        db.session.commit()
        
        flash('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success')
        return redirect(url_for('index'))
    
    return render_template('request.html', form=form)

@app.route('/track', methods=['GET', 'POST'])
def track():
    form = TrackingForm()
    requests = []
    
    if form.validate_on_submit():
        phone = form.phone.data
        requests = Request.query.filter(
            (Request.sender_phone == phone) | (Request.recipient_phone == phone)
        ).order_by(Request.created_at.desc()).all()
        
        if not requests:
            flash('–ó–∞—è–≤–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', 'warning')
    
    return render_template('track.html', form=form, requests=requests)

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = EmployeeRegistrationForm()
    if form.validate_on_submit():
        if Employee.query.filter_by(username=form.username.data).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', 'error')
        elif Employee.query.filter_by(email=form.email.data).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', 'error')
        else:
            employee = Employee(username=form.username.data, email=form.email.data)
            employee.set_password(form.password.data)
            db.session.add(employee)
            db.session.commit()
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success')
            return redirect(url_for('login'))
    
    return render_template('register.html', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = EmployeeLoginForm()
    if form.validate_on_submit():
        employee = Employee.query.filter_by(username=form.username.data).first()
        if employee and employee.check_password(form.password.data):
            session['employee_id'] = employee.id
            session['employee_username'] = employee.username
            flash('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'error')
    
    return render_template('login.html', form=form)

@app.route('/logout')
def logout():
    session.pop('employee_id', None)
    session.pop('employee_username', None)
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
    return redirect(url_for('index'))

@app.route('/dashboard')
def dashboard():
    if 'employee_id' not in session:
        flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'warning')
        return redirect(url_for('login'))
    
    requests = Request.query.order_by(Request.created_at.desc()).all()
    return render_template('dashboard.html', requests=requests)

@app.route('/update_status/<int:request_id>/<new_status>')
def update_status(request_id, new_status):
    if 'employee_id' not in session:
        return redirect(url_for('login'))
    
    req = Request.query.get_or_404(request_id)
    req.status = new_status
    db.session.commit()
    
    flash(f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{request_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "{new_status}".', 'success')
    return redirect(url_for('dashboard'))
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö HTML —à–∞–±–ª–æ–Ω–æ–≤..."

# –°–æ–∑–¥–∞–Ω–∏–µ base.html
cat > $PROJECT_DIR/templates/base.html << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}–•—Ä–æ–º –ö–ó - –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('index') }}">
                <i class="fas fa-truck"></i> –•—Ä–æ–º –ö–ó
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="{{ url_for('index') }}">–ì–ª–∞–≤–Ω–∞—è</a>
                <a class="nav-link" href="{{ url_for('create_request') }}">–ó–∞—è–≤–∫–∞</a>
                <a class="nav-link" href="{{ url_for('track') }}">–û—Ç—Å–ª–µ–¥–∏—Ç—å</a>
                {% if session.employee_id %}
                    <a class="nav-link" href="{{ url_for('dashboard') }}">–ü–∞–Ω–µ–ª—å</a>
                    <a class="nav-link" href="{{ url_for('logout') }}">–í—ã—Ö–æ–¥</a>
                {% else %}
                    <a class="nav-link" href="{{ url_for('login') }}">–í—Ö–æ–¥</a>
                {% endif %}
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ index.html
cat > $PROJECT_DIR/templates/index.html << 'EOF'
{% extends "base.html" %}

{% block content %}
<div class="row">
    <div class="col-md-8">
        <h1><i class="fas fa-truck text-primary"></i> –•—Ä–æ–º –ö–ó - –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏</h1>
        <p class="lead">–ù–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ –ê—Å—Ç–∞–Ω–µ –∏ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É</p>
        
        <div class="row mt-4">
            <div class="col-md-6 mb-3">
                <div class="card">
                    <div class="card-body text-center">
                        <i class="fas fa-city fa-3x text-primary mb-3"></i>
                        <h5>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê—Å—Ç–∞–Ω–µ</h5>
                        <p>–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞</p>
                        <a href="{{ url_for('create_request') }}" class="btn btn-primary">–ó–∞–∫–∞–∑–∞—Ç—å</a>
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="card">
                    <div class="card-body text-center">
                        <i class="fas fa-map-marked-alt fa-3x text-success mb-3"></i>
                        <h5>–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏</h5>
                        <p>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É</p>
                        <a href="{{ url_for('create_request') }}" class="btn btn-success">–ó–∞–∫–∞–∑–∞—Ç—å</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-search"></i> –û—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑</h5>
            </div>
            <div class="card-body">
                <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫</p>
                <a href="{{ url_for('track') }}" class="btn btn-outline-primary w-100">–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞—è–≤–∫—É</a>
            </div>
        </div>
    </div>
</div>
{% endblock %}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
cat > $PROJECT_DIR/init_database.py << 'EOF'
import os
from app import app, db

def init_database():
    with app.app_context():
        try:
            print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            db.create_all()
            print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False

if __name__ == '__main__':
    success = init_database()
    exit(0 if success else 1)
EOF

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
chown -R hromkz:www-data $PROJECT_DIR
chmod +x $PROJECT_DIR/init_database.py

print_status "–§–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã"

print_step "–≠–¢–ê–ü 7: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ë–î..."
if sudo -u hromkz bash -c "cd $PROJECT_DIR && source .env && ./venv/bin/python init_database.py"; then
    print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
else
    print_error "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î"
fi

print_step "–≠–¢–ê–ü 8: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞"

print_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
cat > /etc/systemd/system/hromkz.service << 'EOF'
[Unit]
Description=Hrom KZ Logistics Application
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=exec
User=hromkz
Group=www-data
WorkingDirectory=/var/www/logistics.xrom.org
Environment="PATH=/var/www/logistics.xrom.org/venv/bin"
EnvironmentFile=/var/www/logistics.xrom.org/.env
ExecStart=/var/www/logistics.xrom.org/venv/bin/gunicorn --workers 2 --bind unix:/var/www/logistics.xrom.org/run/hromkz.sock --umask 0007 --timeout 30 --keep-alive 2 main:app
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=10
TimeoutStartSec=60

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable hromkz

print_status "Systemd —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

print_step "–≠–¢–ê–ü 9: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx"

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
cat > /etc/nginx/sites-available/logistics.xrom.org << 'EOF'
server {
    listen 80;
    server_name logistics.xrom.org;
    
    location / {
        proxy_pass http://unix:/var/www/logistics.xrom.org/run/hromkz.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    location /static {
        alias /var/www/logistics.xrom.org/static;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
}
EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞
ln -sf /etc/nginx/sites-available/logistics.xrom.org /etc/nginx/sites-enabled/

# –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞
rm -f /etc/nginx/sites-enabled/default

# –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if nginx -t; then
    print_status "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
else
    print_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
    exit 1
fi

print_step "–≠–¢–ê–ü 10: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"

print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UFW —Ñ–∞–π—Ä–≤–æ–ª–∞..."
ufw --force enable
ufw allow ssh
ufw allow 'Nginx Full'
ufw allow 'PostgreSQL'

print_status "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

print_step "–≠–¢–ê–ü 11: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"

print_info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl restart postgresql
systemctl start hromkz
systemctl restart nginx

print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

print_step "–≠–¢–ê–ü 12: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"

echo "======================================"
print_info "–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ò–°–û–í:"
echo ""

# PostgreSQL
if systemctl is-active --quiet postgresql; then
    print_status "PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "PostgreSQL: –ø—Ä–æ–±–ª–µ–º–∞"
fi

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if systemctl is-active --quiet hromkz; then
    print_status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ hromkz: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ socket —Ñ–∞–π–ª–∞
    if [[ -S "/var/www/logistics.xrom.org/run/hromkz.sock" ]]; then
        print_status "Socket —Ñ–∞–π–ª: —Å–æ–∑–¥–∞–Ω"
    else
        print_error "Socket —Ñ–∞–π–ª: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
else
    print_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ hromkz: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    print_info "–õ–æ–≥–∏:"
    journalctl -u hromkz --no-pager -n 10
fi

# Nginx
if systemctl is-active --quiet nginx; then
    print_status "Nginx: —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "Nginx: –ø—Ä–æ–±–ª–µ–º–∞"
fi

# HTTP —Ç–µ—Å—Ç
print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –æ—Ç–≤–µ—Ç–∞..."
sleep 3
HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://logistics.xrom.org 2>/dev/null || echo "000")

case "$HTTP_CODE" in
    "200")
        print_status "üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•!"
        echo ""
        echo "========================================"
        echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: http://logistics.xrom.org"
        echo "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: http://logistics.xrom.org/register"
        echo "üì¶ –ó–∞—è–≤–∫–∞: http://logistics.xrom.org/request"
        echo "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: http://logistics.xrom.org/track"
        echo ""
        echo "üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
        echo "1. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /register"
        echo "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL: sudo certbot --nginx -d logistics.xrom.org"
        echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        echo ""
        echo "üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï:"
        echo "  sudo systemctl status hromkz     # –°—Ç–∞—Ç—É—Å"
        echo "  sudo journalctl -u hromkz -f     # –õ–æ–≥–∏"
        echo "  sudo systemctl restart hromkz    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
        echo "========================================"
        ;;
    "502")
        print_error "HTTP 502 - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        ;;
    "000")
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        ;;
    *)
        print_error "HTTP –∫–æ–¥: $HTTP_CODE"
        ;;
esac

print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"