#!/bin/bash

# –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –•—Ä–æ–º –ö–ó –Ω–∞ VPS
# –ó–∞–ø—É—Å–∫: sudo bash full_deploy.sh

echo "üöÄ –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –•—Ä–æ–º –ö–ó –Ω–∞ logistics.xrom.org"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
apt update && apt upgrade -y
apt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib git ufw curl wget unzip

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if ! id "hromkz" &>/dev/null; then
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è hromkz..."
    adduser --disabled-password --gecos "" hromkz
    usermod -aG sudo hromkz
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
sudo -u postgres psql << 'EOF'
DROP DATABASE IF EXISTS hromkz_logistics;
DROP USER IF EXISTS hromkz_user;

CREATE DATABASE hromkz_logistics;
CREATE USER hromkz_user WITH ENCRYPTED PASSWORD 'HromKZ_SecurePass2025!';
GRANT ALL PRIVILEGES ON DATABASE hromkz_logistics TO hromkz_user;
ALTER USER hromkz_user CREATEDB;
\q
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
DEPLOY_DIR="/var/www/logistics.xrom.org"
rm -rf $DEPLOY_DIR
mkdir -p $DEPLOY_DIR
cd $DEPLOY_DIR

print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cat > app.py << 'EOF'
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase
from werkzeug.middleware.proxy_fix import ProxyFix

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key")
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get(
    "DATABASE_URL", 
    "postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics"
)
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}

db.init_app(app)

with app.app_context():
    import models
    import routes
    db.create_all()
EOF

cat > main.py << 'EOF'
from app import app

if __name__ == "__main__":
    app.run(debug=False, host="0.0.0.0", port=5000)
EOF

cat > config.py << 'EOF'
import os

class Config:
    SECRET_KEY = os.environ.get('SESSION_SECRET') or 'dev-secret-key'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_ENGINE_OPTIONS = {
        "pool_recycle": 300,
        "pool_pre_ping": True,
    }
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
cat > models.py << 'EOF'
from app import db
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

class Employee(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    assigned_requests = db.relationship('Request', backref='assigned_employee', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<Employee {self.username}>'

class Request(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    customer_name = db.Column(db.String(100), nullable=False)
    customer_phone = db.Column(db.String(20), nullable=False)
    customer_address = db.Column(db.Text, nullable=False)
    cargo_description = db.Column(db.Text, nullable=False)
    cargo_weight = db.Column(db.Float)
    cargo_volume = db.Column(db.Float)
    delivery_type = db.Column(db.String(20), nullable=False)
    status = db.Column(db.String(20), default='pending')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    preferred_delivery_date = db.Column(db.Date)
    pickup_address = db.Column(db.Text)
    special_instructions = db.Column(db.Text)
    assigned_employee_id = db.Column(db.Integer, db.ForeignKey('employee.id'))

    def __repr__(self):
        return f'<Request {self.id}: {self.customer_name}>'
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º
cat > forms.py << 'EOF'
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, TextAreaField, SelectField, FloatField, DateField
from wtforms.validators import DataRequired, Email, Length, Optional
from email_validator import validate_email

class EmployeeRegistrationForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired(), Length(min=4, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    phone = StringField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', validators=[DataRequired(), Length(min=10, max=20)])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired(), Length(min=6)])
    submit = SubmitField('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')

class EmployeeLoginForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired()])
    submit = SubmitField('–í–æ–π—Ç–∏')

class AstanaDeliveryForm(FlaskForm):
    customer_name = StringField('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', validators=[DataRequired(), Length(max=100)])
    customer_phone = StringField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞', validators=[DataRequired(), Length(max=20)])
    customer_address = TextAreaField('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', validators=[DataRequired()])
    pickup_address = TextAreaField('–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞', validators=[DataRequired()])
    cargo_description = TextAreaField('–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞', validators=[DataRequired()])
    cargo_weight = FloatField('–í–µ—Å (–∫–≥)', validators=[Optional()])
    cargo_volume = FloatField('–û–±—ä–µ–º (–º¬≥)', validators=[Optional()])
    preferred_delivery_date = DateField('–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', validators=[Optional()])
    special_instructions = TextAreaField('–û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è', validators=[Optional()])
    submit = SubmitField('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É')

class RegionalDeliveryForm(FlaskForm):
    customer_name = StringField('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', validators=[DataRequired(), Length(max=100)])
    customer_phone = StringField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞', validators=[DataRequired(), Length(max=20)])
    customer_address = TextAreaField('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', validators=[DataRequired()])
    pickup_address = TextAreaField('–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞', validators=[DataRequired()])
    cargo_description = TextAreaField('–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞', validators=[DataRequired()])
    cargo_weight = FloatField('–í–µ—Å (–∫–≥)', validators=[Optional()])
    cargo_volume = FloatField('–û–±—ä–µ–º (–º¬≥)', validators=[Optional()])
    preferred_delivery_date = DateField('–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', validators=[Optional()])
    special_instructions = TextAreaField('–û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è', validators=[Optional()])
    submit = SubmitField('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É')

class TrackOrderForm(FlaskForm):
    customer_phone = StringField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', validators=[DataRequired(), Length(max=20)])
    submit = SubmitField('–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏')

class UpdateStatusForm(FlaskForm):
    status = SelectField('–°—Ç–∞—Ç—É—Å', choices=[
        ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'),
        ('processing', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        ('shipped', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
        ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω')
    ], validators=[DataRequired()])
    submit = SubmitField('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (routes.py –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –±–ª–æ–∫–µ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞)
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤..."

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
mkdir -p static/{css,js,images}
mkdir -p templates

# –°–æ–∑–¥–∞–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π
cat > static/css/custom.css << 'EOF'
/* Apple Design System Colors */
:root {
    --apple-blue: #007AFF;
    --apple-gray: #8E8E93;
    --apple-dark: #1D1D1F;
    --apple-light: #F2F2F7;
    --text-primary: #1D1D1F;
    --text-secondary: #86868B;
    --bg-primary: #FFFFFF;
    --bg-secondary: #F2F2F7;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: var(--bg-secondary);
    color: var(--text-primary);
}

.modern-nav {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(20px);
    border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);
}

.hero-section {
    background: linear-gradient(135deg, var(--apple-blue), #5856D6);
    color: white;
    padding: 4rem 0;
}

.card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.btn-primary {
    background: var(--apple-blue);
    border: none;
    border-radius: 8px;
    font-weight: 500;
}

.btn-primary:hover {
    background: #0056CC;
}

.form-control {
    border: 1px solid #D1D1D6;
    border-radius: 8px;
    padding: 12px;
}

.form-control:focus {
    border-color: var(--apple-blue);
    box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
}

.table {
    background: white;
    border-radius: 12px;
    overflow: hidden;
}

.badge {
    border-radius: 6px;
    font-weight: 500;
}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ JavaScript
cat > static/js/main.js << 'EOF'
// Phone mask functionality
document.addEventListener('DOMContentLoaded', function() {
    const phoneInputs = document.querySelectorAll('.phone-mask');
    
    phoneInputs.forEach(input => {
        input.addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (!value.startsWith('7')) value = '7' + value;
            value = value.substring(0, 11);
            
            let formatted = '+7(';
            if (value.length > 1) {
                formatted += '7';
                if (value.length > 2) {
                    formatted += value.substring(2, 4) + ')';
                    if (value.length > 4) {
                        formatted += value.substring(4, 7);
                        if (value.length > 7) {
                            formatted += '-' + value.substring(7, 9);
                            if (value.length > 9) {
                                formatted += '-' + value.substring(9, 11);
                            }
                        }
                    }
                }
            }
            e.target.value = formatted;
        });
        
        input.addEventListener('focus', function(e) {
            if (!e.target.value) e.target.value = '+7(7';
        });
    });
});

// Form functions
function showForm(formId) {
    document.querySelectorAll('.form-container').forEach(form => {
        form.style.display = 'none';
    });
    const form = document.getElementById(formId);
    if (form) {
        form.style.display = 'block';
        form.scrollIntoView({ behavior: 'smooth' });
    }
}

function hideForm(formId) {
    const form = document.getElementById(formId);
    if (form) form.style.display = 'none';
}
EOF

print_status "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤..."

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
cat > templates/base.html << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}–•—Ä–æ–º –ö–ó - –õ–æ–≥–∏—Å—Ç–∏–∫–∞{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
</head>
<body>
    <nav class="navbar navbar-expand-lg modern-nav">
        <div class="container">
            <a class="navbar-brand fw-bold" href="{{ url_for('index') }}">–•—Ä–æ–º –ö–ó</a>
            <div class="navbar-nav ms-auto">
                {% if session.employee_id %}
                    <a class="nav-link" href="{{ url_for('dashboard') }}">–ü–∞–Ω–µ–ª—å</a>
                    <a class="nav-link" href="{{ url_for('logout') }}">–í—ã–π—Ç–∏</a>
                {% else %}
                    <a class="nav-link" href="{{ url_for('login') }}">–í—Ö–æ–¥</a>
                    <a class="nav-link" href="{{ url_for('register') }}">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                {% endif %}
            </div>
        </div>
    </nav>

    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            <div class="container mt-3">
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }}">
                        {{ message }}
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

    <main>{% block content %}{% endblock %}</main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>
EOF

print_status "–°–æ–∑–¥–∞–Ω–∏–µ routes.py..."

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ - —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞
cat > routes.py << 'EOF'
from flask import render_template, redirect, url_for, flash, request, session
from app import app, db
from models import Employee, Request
from forms import *
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)

@app.route('/')
def index():
    astana_form = AstanaDeliveryForm()
    regions_form = RegionalDeliveryForm()
    return render_template('index.html', 
                         astana_form=astana_form, 
                         regions_form=regions_form)

@app.route('/submit_astana', methods=['POST'])
def submit_astana():
    form = AstanaDeliveryForm()
    if form.validate_on_submit():
        request_obj = Request(
            customer_name=form.customer_name.data,
            customer_phone=form.customer_phone.data,
            customer_address=form.customer_address.data,
            pickup_address=form.pickup_address.data,
            cargo_description=form.cargo_description.data,
            cargo_weight=form.cargo_weight.data,
            cargo_volume=form.cargo_volume.data,
            delivery_type='astana',
            preferred_delivery_date=form.preferred_delivery_date.data,
            special_instructions=form.special_instructions.data
        )
        db.session.add(request_obj)
        db.session.commit()
        flash(f'–ó–∞—è–≤–∫–∞ ‚Ññ{request_obj.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success')
        return redirect(url_for('index'))
    
    for field, errors in form.errors.items():
        for error in errors:
            flash(f'{getattr(form, field).label.text}: {error}', 'error')
    return redirect(url_for('index'))

@app.route('/submit_regions', methods=['POST'])
def submit_regions():
    form = RegionalDeliveryForm()
    if form.validate_on_submit():
        request_obj = Request(
            customer_name=form.customer_name.data,
            customer_phone=form.customer_phone.data,
            customer_address=form.customer_address.data,
            pickup_address=form.pickup_address.data,
            cargo_description=form.cargo_description.data,
            cargo_weight=form.cargo_weight.data,
            cargo_volume=form.cargo_volume.data,
            delivery_type='regions',
            preferred_delivery_date=form.preferred_delivery_date.data,
            special_instructions=form.special_instructions.data
        )
        db.session.add(request_obj)
        db.session.commit()
        flash(f'–ó–∞—è–≤–∫–∞ ‚Ññ{request_obj.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success')
        return redirect(url_for('index'))
    
    for field, errors in form.errors.items():
        for error in errors:
            flash(f'{getattr(form, field).label.text}: {error}', 'error')
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = EmployeeRegistrationForm()
    if form.validate_on_submit():
        if Employee.query.filter_by(username=form.username.data).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
            return render_template('register.html', form=form)
        
        if Employee.query.filter_by(email=form.email.data).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
            return render_template('register.html', form=form)
        
        employee = Employee(
            username=form.username.data,
            email=form.email.data,
            phone=form.phone.data
        )
        employee.set_password(form.password.data)
        db.session.add(employee)
        db.session.commit()
        
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = EmployeeLoginForm()
    if form.validate_on_submit():
        employee = Employee.query.filter_by(username=form.username.data).first()
        if employee and employee.check_password(form.password.data):
            session['employee_id'] = employee.id
            session['employee_username'] = employee.username
            flash('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('dashboard'))
        flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
    
    return render_template('login.html', form=form)

@app.route('/logout')
def logout():
    session.clear()
    flash('–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'info')
    return redirect(url_for('index'))

@app.route('/dashboard')
def dashboard():
    if 'employee_id' not in session:
        return redirect(url_for('login'))
    
    requests = Request.query.order_by(Request.created_at.desc()).all()
    status_names = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
    }
    return render_template('dashboard.html', requests=requests, status_names=status_names)

@app.route('/track_order', methods=['GET', 'POST'])
def track_order():
    form = TrackOrderForm()
    orders = []
    status_names = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω', 
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
    }
    
    if form.validate_on_submit():
        orders = Request.query.filter_by(customer_phone=form.customer_phone.data).all()
        if not orders:
            flash('–ó–∞—è–≤–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info')
    
    return render_template('track_order.html', form=form, orders=orders, status_names=status_names)

@app.route('/update_status/<int:request_id>', methods=['POST'])
def update_status(request_id):
    if 'employee_id' not in session:
        return redirect(url_for('login'))
    
    request_obj = Request.query.get_or_404(request_id)
    form = UpdateStatusForm()
    
    if form.validate_on_submit():
        request_obj.status = form.status.data
        request_obj.updated_at = datetime.utcnow()
        request_obj.assigned_employee_id = session['employee_id']
        db.session.commit()
        flash('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
    
    return redirect(url_for('dashboard'))

@app.route('/health')
def health():
    return {'status': 'ok', 'message': '–•—Ä–æ–º –ö–ó —Ä–∞–±–æ—Ç–∞–µ—Ç'}
EOF

print_status "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤..."

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
cat > templates/index.html << 'EOF'
{% extends "base.html" %}

{% block content %}
<div class="hero-section text-white text-center py-5">
    <div class="container">
        <h1 class="display-4 fw-bold mb-3">–•—Ä–æ–º –ö–ó</h1>
        <p class="lead mb-4">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</p>
        <div class="row g-3">
            <div class="col-md-6">
                <button class="btn btn-light btn-lg w-100" onclick="showForm('astanaForm')">
                    <i class="fas fa-city me-2"></i>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê—Å—Ç–∞–Ω–µ
                </button>
            </div>
            <div class="col-md-6">
                <button class="btn btn-outline-light btn-lg w-100" onclick="showForm('regionsForm')">
                    <i class="fas fa-map me-2"></i>–ú–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
                </button>
            </div>
        </div>
    </div>
</div>

<div class="container py-5">
    <!-- –§–æ—Ä–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ê—Å—Ç–∞–Ω–µ -->
    <div id="astanaForm" class="form-container" style="display:none;">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h4><i class="fas fa-city me-2"></i>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê—Å—Ç–∞–Ω–µ</h4>
                    </div>
                    <div class="card-body">
                        <form method="POST" action="{{ url_for('submit_astana') }}">
                            {{ astana_form.hidden_tag() }}
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        {{ astana_form.customer_name.label(class="form-label") }}
                                        {{ astana_form.customer_name(class="form-control") }}
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        {{ astana_form.customer_phone.label(class="form-label") }}
                                        {{ astana_form.customer_phone(class="form-control phone-mask", placeholder="+7(7__)___-__-__") }}
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                {{ astana_form.customer_address.label(class="form-label") }}
                                {{ astana_form.customer_address(class="form-control", rows="2") }}
                            </div>
                            <div class="mb-3">
                                {{ astana_form.pickup_address.label(class="form-label") }}
                                {{ astana_form.pickup_address(class="form-control", rows="2") }}
                            </div>
                            <div class="mb-3">
                                {{ astana_form.cargo_description.label(class="form-label") }}
                                {{ astana_form.cargo_description(class="form-control", rows="3") }}
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        {{ astana_form.cargo_weight.label(class="form-label") }}
                                        {{ astana_form.cargo_weight(class="form-control") }}
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        {{ astana_form.cargo_volume.label(class="form-label") }}
                                        {{ astana_form.cargo_volume(class="form-control") }}
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <button type="button" class="btn btn-secondary w-100" onclick="hideForm('astanaForm')">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                                </div>
                                <div class="col-md-6">
                                    {{ astana_form.submit(class="btn btn-primary w-100") }}
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- –§–æ—Ä–º–∞ –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ -->
    <div id="regionsForm" class="form-container" style="display:none;">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h4><i class="fas fa-map me-2"></i>–ú–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</h4>
                    </div>
                    <div class="card-body">
                        <form method="POST" action="{{ url_for('submit_regions') }}">
                            {{ regions_form.hidden_tag() }}
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        {{ regions_form.customer_name.label(class="form-label") }}
                                        {{ regions_form.customer_name(class="form-control") }}
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        {{ regions_form.customer_phone.label(class="form-label") }}
                                        {{ regions_form.customer_phone(class="form-control phone-mask", placeholder="+7(7__)___-__-__") }}
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                {{ regions_form.customer_address.label(class="form-label") }}
                                {{ regions_form.customer_address(class="form-control", rows="2") }}
                            </div>
                            <div class="mb-3">
                                {{ regions_form.pickup_address.label(class="form-label") }}
                                {{ regions_form.pickup_address(class="form-control", rows="2") }}
                            </div>
                            <div class="mb-3">
                                {{ regions_form.cargo_description.label(class="form-label") }}
                                {{ regions_form.cargo_description(class="form-control", rows="3") }}
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <button type="button" class="btn btn-secondary w-100" onclick="hideForm('regionsForm')">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                                </div>
                                <div class="col-md-6">
                                    {{ regions_form.submit(class="btn btn-primary w-100") }}
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-md-4">
            <div class="text-center">
                <i class="fas fa-shipping-fast fa-3x text-primary mb-3"></i>
                <h4>–ë—ã—Å—Ç—Ä–æ</h4>
                <p>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê—Å—Ç–∞–Ω–µ –∑–∞ 1-3 —á–∞—Å–∞</p>
            </div>
        </div>
        <div class="col-md-4">
            <div class="text-center">
                <i class="fas fa-shield-alt fa-3x text-primary mb-3"></i>
                <h4>–ù–∞–¥–µ–∂–Ω–æ</h4>
                <p>100% —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞</p>
            </div>
        </div>
        <div class="col-md-4">
            <div class="text-center">
                <i class="fas fa-headset fa-3x text-primary mb-3"></i>
                <h4>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</h4>
                <p>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}
EOF

print_status "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤..."

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
cat > templates/register.html << 'EOF'
{% extends "base.html" %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h4>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h4>
                </div>
                <div class="card-body">
                    <form method="POST">
                        {{ form.hidden_tag() }}
                        <div class="mb-3">
                            {{ form.username.label(class="form-label") }}
                            {{ form.username(class="form-control") }}
                        </div>
                        <div class="mb-3">
                            {{ form.email.label(class="form-label") }}
                            {{ form.email(class="form-control") }}
                        </div>
                        <div class="mb-3">
                            {{ form.phone.label(class="form-label") }}
                            {{ form.phone(class="form-control phone-mask", placeholder="+7(7__)___-__-__") }}
                        </div>
                        <div class="mb-3">
                            {{ form.password.label(class="form-label") }}
                            {{ form.password(class="form-control") }}
                        </div>
                        <div class="d-grid">
                            {{ form.submit(class="btn btn-primary") }}
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
EOF

cat > templates/login.html << 'EOF'
{% extends "base.html" %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h4>–í—Ö–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h4>
                </div>
                <div class="card-body">
                    <form method="POST">
                        {{ form.hidden_tag() }}
                        <div class="mb-3">
                            {{ form.username.label(class="form-label") }}
                            {{ form.username(class="form-control") }}
                        </div>
                        <div class="mb-3">
                            {{ form.password.label(class="form-label") }}
                            {{ form.password(class="form-control") }}
                        </div>
                        <div class="d-grid">
                            {{ form.submit(class="btn btn-primary") }}
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv venv
./venv/bin/pip install --upgrade pip
./venv/bin/pip install flask flask-sqlalchemy flask-wtf wtforms werkzeug email-validator psycopg2-binary gunicorn requests sqlalchemy

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
cat > .env << 'EOF'
DATABASE_URL=postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics
SESSION_SECRET=HromKZ_Ultra_Secure_Session_Key_2025_Production_Full_Deploy
FLASK_ENV=production
FLASK_APP=main.py
EOF

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
print_status "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
source .env
./venv/bin/python -c "from app import app, db; app.app_context().push(); db.create_all(); print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')"

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–ª—É–∂–±—ã..."
cat > /etc/systemd/system/hromkz.service << EOF
[Unit]
Description=Hrom KZ Full Logistics System
After=network.target

[Service]
User=hromkz
Group=www-data
WorkingDirectory=$DEPLOY_DIR
Environment="PATH=$DEPLOY_DIR/venv/bin"
EnvironmentFile=$DEPLOY_DIR/.env
ExecStart=$DEPLOY_DIR/venv/bin/gunicorn --workers 3 --bind unix:$DEPLOY_DIR/hromkz.sock -m 007 main:app
ExecReload=/bin/kill -s HUP \$MAINPID
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

# Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
cat > /etc/nginx/sites-available/logistics.xrom.org << 'EOF'
server {
    listen 80;
    server_name logistics.xrom.org;

    location = /favicon.ico { 
        access_log off; 
        log_not_found off; 
    }
    
    location /static/ {
        alias /var/www/logistics.xrom.org/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        gzip_static on;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/var/www/logistics.xrom.org/hromkz.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
EOF

ln -sf /etc/nginx/sites-available/logistics.xrom.org /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chown -R www-data:www-data $DEPLOY_DIR
chmod -R 755 $DEPLOY_DIR
chmod 644 $DEPLOY_DIR/.env
# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è hromkz –≤ –≥—Ä—É–ø–ø—É www-data –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
usermod -a -G www-data hromkz

# –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±
print_status "–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±..."
systemctl daemon-reload
systemctl start hromkz
systemctl enable hromkz
nginx -t && systemctl restart nginx

# –§–∞–π—Ä–≤–æ–ª
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
ufw --force enable
ufw allow ssh
ufw allow 'Nginx Full'

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
cat > /var/www/backup.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="/var/www/backups"
DATE=$(date +%Y%m%d_%H%M%S)
mkdir -p $BACKUP_DIR

export PGPASSWORD="HromKZ_SecurePass2025!"
pg_dump -h localhost -U hromkz_user hromkz_logistics > $BACKUP_DIR/hromkz_full_$DATE.sql

find $BACKUP_DIR -name "hromkz_full_*.sql" -mtime +7 -delete
echo "Backup completed: $BACKUP_DIR/hromkz_full_$DATE.sql"
EOF

chmod +x /var/www/backup.sh
chown www-data:www-data /var/www/backup.sh

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cat > /var/www/update.sh << 'EOF'
#!/bin/bash
cd /var/www/logistics.xrom.org
echo "Updating application..."
# git pull origin main  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
systemctl restart hromkz
echo "Application updated!"
EOF

chmod +x /var/www/update.sh
chown www-data:www-data /var/www/update.sh

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã
sudo -u www-data crontab - << 'EOF'
0 2 * * * /var/www/backup.sh >> /var/www/backup.log 2>&1
EOF

print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±..."
sleep 5

echo ""
echo "‚úÖ –ü–û–õ–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "==============================================="
echo "üåê –°–∞–π—Ç: http://logistics.xrom.org"
echo "üìä –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±:"
systemctl is-active --quiet hromkz && echo "  ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "  ‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞"
systemctl is-active --quiet nginx && echo "  ‚úÖ Nginx: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "  ‚ùå Nginx: –æ—à–∏–±–∫–∞"
systemctl is-active --quiet postgresql && echo "  ‚úÖ PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "  ‚ùå PostgreSQL: –æ—à–∏–±–∫–∞"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS: logistics.xrom.org -> $(curl -s ifconfig.me 2>/dev/null || echo '–í–ê–®_IP')"
echo "2. SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: sudo certbot --nginx -d logistics.xrom.org"
echo "3. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ /register"
echo ""
echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "  –õ–æ–≥–∏: sudo journalctl -u hromkz -f"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: sudo systemctl restart hromkz"
echo "  –ë—ç–∫–∞–ø: /var/www/backup.sh"
echo "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: /var/www/update.sh"
echo ""
echo "üéâ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
EOF

chmod +x full_deploy.sh

print_status "–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏..."

cat > templates/dashboard.html << 'EOF'
{% extends "base.html" %}

{% block content %}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
        <span class="badge bg-primary">{{ session.employee_username }}</span>
    </div>

    {% if requests %}
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">–í—Å–µ –∑–∞—è–≤–∫–∏ ({{ requests|length }})</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped mb-0">
                        <thead>
                            <tr>
                                <th>‚Ññ</th>
                                <th>–ö–ª–∏–µ–Ω—Ç</th>
                                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                <th>–¢–∏–ø</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–∞—Ç–∞</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for req in requests %}
                            <tr>
                                <td><strong>#{{ req.id }}</strong></td>
                                <td>{{ req.customer_name }}</td>
                                <td>{{ req.customer_phone }}</td>
                                <td>
                                    {% if req.delivery_type == 'astana' %}
                                        <span class="badge bg-primary">–ê—Å—Ç–∞–Ω–∞</span>
                                    {% else %}
                                        <span class="badge bg-secondary">–†–µ–≥–∏–æ–Ω—ã</span>
                                    {% endif %}
                                </td>
                                <td>
                                    {% set status_colors = {
                                        'pending': 'warning',
                                        'processing': 'info',
                                        'shipped': 'primary',
                                        'delivered': 'success'
                                    } %}
                                    <span class="badge bg-{{ status_colors[req.status] }}">
                                        {{ status_names[req.status] }}
                                    </span>
                                </td>
                                <td>{{ req.created_at.strftime('%d.%m.%Y') }}</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-info" 
                                            data-bs-toggle="modal" 
                                            data-bs-target="#modal{{ req.id }}">
                                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                    </button>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏ -->
        {% for req in requests %}
        <div class="modal fade" id="modal{{ req.id }}">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–ó–∞—è–≤–∫–∞ #{{ req.id }}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>–ö–ª–∏–µ–Ω—Ç</h6>
                                <p><strong>–ò–º—è:</strong> {{ req.customer_name }}</p>
                                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {{ req.customer_phone }}</p>
                                <p><strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {{ req.customer_address }}</p>
                                {% if req.pickup_address %}
                                <p><strong>–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞:</strong> {{ req.pickup_address }}</p>
                                {% endif %}
                            </div>
                            <div class="col-md-6">
                                <h6>–ì—Ä—É–∑</h6>
                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {{ req.cargo_description }}</p>
                                {% if req.cargo_weight %}
                                <p><strong>–í–µ—Å:</strong> {{ req.cargo_weight }} –∫–≥</p>
                                {% endif %}
                                {% if req.cargo_volume %}
                                <p><strong>–û–±—ä–µ–º:</strong> {{ req.cargo_volume }} –º¬≥</p>
                                {% endif %}
                            </div>
                        </div>
                        {% if req.special_instructions %}
                        <h6>–û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è</h6>
                        <p>{{ req.special_instructions }}</p>
                        {% endif %}
                        
                        <form method="POST" action="{{ url_for('update_status', request_id=req.id) }}" class="mt-3">
                            <div class="row">
                                <div class="col-md-8">
                                    <select name="status" class="form-select">
                                        <option value="pending" {{ 'selected' if req.status == 'pending' }}>–û–∂–∏–¥–∞–µ—Ç</option>
                                        <option value="processing" {{ 'selected' if req.status == 'processing' }}>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                                        <option value="shipped" {{ 'selected' if req.status == 'shipped' }}>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
                                        <option value="delivered" {{ 'selected' if req.status == 'delivered' }}>–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <button type="submit" class="btn btn-primary w-100">–û–±–Ω–æ–≤–∏—Ç—å</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        {% endfor %}
    {% else %}
        <div class="text-center py-5">
            <i class="fas fa-inbox fa-4x text-muted mb-3"></i>
            <h4>–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h4>
            <p class="text-muted">–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
        </div>
    {% endif %}
</div>
{% endblock %}
EOF

cat > templates/track_order.html << 'EOF'
{% extends "base.html" %}

{% block content %}
<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header text-center">
                    <h4><i class="fas fa-search me-2"></i>–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑</h4>
                </div>
                <div class="card-body">
                    <form method="POST">
                        {{ form.hidden_tag() }}
                        <div class="row">
                            <div class="col-md-8">
                                {{ form.customer_phone.label(class="form-label") }}
                                {{ form.customer_phone(class="form-control phone-mask", placeholder="+7(7__)___-__-__") }}
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                {{ form.submit(class="btn btn-primary w-100") }}
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {% if orders %}
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-list me-2"></i>–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {{ orders|length }}</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-striped mb-0">
                            <thead>
                                <tr>
                                    <th>‚Ññ –∑–∞—è–≤–∫–∏</th>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for order in orders %}
                                <tr>
                                    <td><strong>#{{ order.id }}</strong></td>
                                    <td>{{ order.created_at.strftime('%d.%m.%Y %H:%M') }}</td>
                                    <td>
                                        {% if order.delivery_type == 'astana' %}
                                            <span class="badge bg-primary">–ê—Å—Ç–∞–Ω–∞</span>
                                        {% else %}
                                            <span class="badge bg-secondary">–†–µ–≥–∏–æ–Ω—ã</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% set status_colors = {
                                            'pending': 'warning',
                                            'processing': 'info',
                                            'shipped': 'primary',
                                            'delivered': 'success'
                                        } %}
                                        <span class="badge bg-{{ status_colors[order.status] }}">
                                            {{ status_names[order.status] }}
                                        </span>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endif %}
</div>
{% endblock %}
EOF

print_status "‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!"
print_status "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo bash full_deploy.sh"