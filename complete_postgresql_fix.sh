#!/bin/bash

echo "üîß –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
echo "==============================================="

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[OK]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_info() { echo -e "${YELLOW}[INFO]${NC} $1"; }

if [[ $EUID -ne 0 ]]; then
   print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo: sudo bash complete_postgresql_fix.sh"
   exit 1
fi

print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl stop hromkz || true
systemctl stop hromkz-test || true
systemctl stop postgresql || true

print_info "–ü–û–õ–ù–ê–Ø –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL..."

# –£–¥–∞–ª—è–µ–º PostgreSQL –ø–æ–ª–Ω–æ—Å—Ç—å—é
apt-get remove --purge -y postgresql postgresql-* 
rm -rf /var/lib/postgresql/
rm -rf /etc/postgresql/
rm -rf /var/log/postgresql/

print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–µ–∂–µ–≥–æ PostgreSQL..."
apt-get update
apt-get install -y postgresql postgresql-contrib

print_info "–ó–∞–ø—É—Å–∫ PostgreSQL..."
systemctl start postgresql
systemctl enable postgresql

# –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
sleep 10

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sudo -u postgres psql << 'EOF'
-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE USER hromkz_user WITH ENCRYPTED PASSWORD 'HromKZ_SecurePass2025!';
ALTER USER hromkz_user CREATEDB;

-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CREATE DATABASE hromkz_logistics OWNER hromkz_user;
GRANT ALL PRIVILEGES ON DATABASE hromkz_logistics TO hromkz_user;

-- –í—ã—Ö–æ–¥
\q
EOF

print_status "PostgreSQL –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
if sudo -u postgres psql -d hromkz_logistics -c "SELECT 1;" > /dev/null 2>&1; then
    print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

cd /var/www/logistics.xrom.org

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ app.py –±–µ–∑ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î..."
# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
cp app.py app_backup_$(date +%s).py

cat > app.py << 'EOF'
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase
from werkzeug.middleware.proxy_fix import ProxyFix

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key")
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get(
    "DATABASE_URL", 
    "postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics"
)
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}

db.init_app(app)

# –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
try:
    import models
    import routes
except ImportError as e:
    print(f"Warning: Could not import models or routes: {e}")
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î..."
cat > init_database.py << 'EOF'
#!/usr/bin/env python3
import os
from app import app, db

def init_db():
    with app.app_context():
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.create_all()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == '__main__':
    init_db()
EOF

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
chown hromkz:www-data app.py init_database.py
chmod +x init_database.py

print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if sudo -u hromkz bash -c 'cd /var/www/logistics.xrom.org && source .env && ./venv/bin/python init_database.py'; then
    print_status "–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
else
    print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"
    # –ü–æ–∫–∞–∂–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    print_info "–ü–æ–ø—ã—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
    sudo -u hromkz bash -c 'cd /var/www/logistics.xrom.org && source .env && ./venv/bin/python -c "from app import db; print(\"DB connection OK\")"'
fi

print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if sudo -u hromkz bash -c 'cd /var/www/logistics.xrom.org && source .env && ./venv/bin/python -c "from app import app; print(\"Flask app imported successfully\")"'; then
    print_status "Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
    exit 1
fi

print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chown -R hromkz:www-data /var/www/logistics.xrom.org
chmod 775 /var/www/logistics.xrom.org
mkdir -p /var/www/logistics.xrom.org/run
chown hromkz:www-data /var/www/logistics.xrom.org/run
chmod 775 /var/www/logistics.xrom.org/run

print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞..."
cat > /etc/systemd/system/hromkz.service << 'EOF'
[Unit]
Description=Hrom KZ Logistics System
After=network.target postgresql.service
Requires=postgresql.service

[Service]
Type=notify
User=hromkz
Group=www-data
WorkingDirectory=/var/www/logistics.xrom.org
Environment="PATH=/var/www/logistics.xrom.org/venv/bin"
EnvironmentFile=/var/www/logistics.xrom.org/.env
ExecStart=/var/www/logistics.xrom.org/venv/bin/gunicorn --workers 3 --bind unix:/var/www/logistics.xrom.org/run/hromkz.sock --umask 0007 main:app
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=5
TimeoutStartSec=30

[Install]
WantedBy=multi-user.target
EOF

print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl daemon-reload
systemctl enable hromkz
systemctl start hromkz

print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
nginx -t
systemctl reload nginx

print_info "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

print_status "–ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:"
echo "================================"

# PostgreSQL
if systemctl is-active --quiet postgresql; then
    print_status "PostgreSQL: –∞–∫—Ç–∏–≤–µ–Ω"
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if sudo -u postgres psql -d hromkz_logistics -c "SELECT COUNT(*) FROM information_schema.tables;" > /dev/null 2>&1; then
        print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK"
    else
        print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    fi
else
    print_error "PostgreSQL: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
fi

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if systemctl is-active --quiet hromkz; then
    print_status "–°–µ—Ä–≤–∏—Å hromkz: –∞–∫—Ç–∏–≤–µ–Ω"
    
    # Socket —Ñ–∞–π–ª
    if [[ -S "/var/www/logistics.xrom.org/run/hromkz.sock" ]]; then
        print_status "Socket —Ñ–∞–π–ª: —Å–æ–∑–¥–∞–Ω"
        ls -la /var/www/logistics.xrom.org/run/hromkz.sock
    else
        print_error "Socket —Ñ–∞–π–ª: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
else
    print_error "–°–µ—Ä–≤–∏—Å hromkz: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    print_info "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:"
    journalctl -u hromkz --no-pager -n 10
fi

# HTTP —Ç–µ—Å—Ç
print_info "HTTP —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
sleep 3
HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" http://logistics.xrom.org || echo "000")

case "$HTTP_CODE" in
    "200")
        print_status "üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        print_status "URL: http://logistics.xrom.org"
        print_info "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: http://logistics.xrom.org/register"
        ;;
    "502")
        print_error "HTTP 502 Bad Gateway - —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        ;;
    "404")
        print_error "HTTP 404 - –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ;;
    "500")
        print_error "HTTP 500 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        ;;
    *)
        print_error "HTTP –∫–æ–¥: $HTTP_CODE"
        ;;
esac

echo ""
print_info "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
echo "  sudo systemctl status hromkz        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
echo "  sudo journalctl -u hromkz -f        # –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"  
echo "  sudo systemctl restart hromkz       # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
echo "  sudo systemctl restart postgresql   # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ë–î"

if [[ "$HTTP_CODE" != "200" ]]; then
    print_info "–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
    echo "  sudo journalctl -u hromkz --no-pager -n 20"
fi