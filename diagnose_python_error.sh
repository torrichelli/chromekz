#!/bin/bash

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ Python"
echo "=================================="

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[OK]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_info() { echo -e "${YELLOW}[INFO]${NC} $1"; }

if [[ $EUID -ne 0 ]]; then
   print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo"
   exit 1
fi

cd /var/www/logistics.xrom.org

print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
systemctl stop hromkz

print_info "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞..."

# –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app.py –ë–ï–ó –∏–º–ø–æ—Ä—Ç–∞ routes –≤–Ω—É—Ç—Ä–∏
cat > app.py << 'EOF'
import os
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase
from werkzeug.middleware.proxy_fix import ProxyFix

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)

def create_app():
    app = Flask(__name__)
    app.secret_key = os.environ.get("SESSION_SECRET", "fallback-secret-key")
    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)
    
    app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get(
        "DATABASE_URL", 
        "postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics"
    )
    app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
        "pool_recycle": 300,
        "pool_pre_ping": True,
    }
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    
    db.init_app(app)
    
    # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ app context
    with app.app_context():
        try:
            import models
            logger.info("Models imported successfully")
        except ImportError as e:
            logger.warning(f"Could not import models: {e}")
    
    return app

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()

# –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    import routes
    logger.info("Routes imported successfully")
except ImportError as e:
    logger.error(f"Could not import routes: {e}")
EOF

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
cat > main.py << 'EOF'
from app import app

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è gunicorn
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
EOF

print_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞..."
chown -R hromkz:www-data /var/www/logistics.xrom.org

print_info "–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if sudo -u hromkz bash -c 'cd /var/www/logistics.xrom.org && source .env && timeout 10 ./venv/bin/python -c "
try:
    from app import app
    print(\"‚úì Flask app imported\")
    from models import Employee, Request  
    print(\"‚úì Models imported\")
    import routes
    print(\"‚úì Routes imported\")
    print(\"‚úì All imports successful\")
except Exception as e:
    print(f\"‚úó Error: {e}\")
    import traceback
    traceback.print_exc()
"'; then
    print_status "–ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
else
    print_error "–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞–ª–∏—Å—å"
fi

print_info "–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
systemctl start hromkz

print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
sleep 8

print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
journalctl -u hromkz --no-pager -n 5

print_info "HTTP —Ç–µ—Å—Ç..."
HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://logistics.xrom.org 2>/dev/null || echo "000")

case "$HTTP_CODE" in
    "200")
        print_status "üéâ –ò–°–ü–†–ê–í–õ–ï–ù–û! –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        echo ""
        echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü:"
        curl -s http://logistics.xrom.org | head -n 5
        echo ""
        echo "URL: http://logistics.xrom.org"
        echo "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: http://logistics.xrom.org/register"
        ;;
    "404")
        print_error "–í—Å–µ –µ—â–µ HTTP 404"
        ;;
    "500")
        print_error "HTTP 500 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        ;;
    "502")
        print_error "HTTP 502 - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        ;;
    *)
        print_error "HTTP –∫–æ–¥: $HTTP_CODE"
        ;;
esac

print_info "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"