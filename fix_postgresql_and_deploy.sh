#!/bin/bash

echo "üõ†Ô∏è –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PostgreSQL –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
echo "=============================================="

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[OK]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_info() { echo -e "${YELLOW}[INFO]${NC} $1"; }

if [[ $EUID -ne 0 ]]; then
   print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo: sudo bash fix_postgresql_and_deploy.sh"
   exit 1
fi

print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl stop hromkz || true
systemctl stop hromkz-test || true
systemctl stop postgresql || true

print_info "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PostgreSQL..."
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ PostgreSQL
chown -R postgres:postgres /var/lib/postgresql/
chmod -R 755 /var/lib/postgresql/
chmod -R 700 /var/lib/postgresql/*/main/

print_info "–ó–∞–ø—É—Å–∫ PostgreSQL..."
systemctl start postgresql
systemctl enable postgresql

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL
sleep 5

print_info "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
sudo -u postgres psql << 'EOF'
-- –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –±–∞–∑–µ
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'hromkz_logistics' AND pid <> pg_backend_pid();

-- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
DROP DATABASE IF EXISTS hromkz_logistics;
DROP USER IF EXISTS hromkz_user;

-- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã
CREATE USER hromkz_user WITH ENCRYPTED PASSWORD 'HromKZ_SecurePass2025!';
CREATE DATABASE hromkz_logistics OWNER hromkz_user;
GRANT ALL PRIVILEGES ON DATABASE hromkz_logistics TO hromkz_user;
ALTER USER hromkz_user CREATEDB;

\q
EOF

print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞"

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ app.py –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î..."
cd /var/www/logistics.xrom.org

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π app.py
cp app.py app_original.py

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é app.py –±–µ–∑ db.create_all() –≤ –∏–º–ø–æ—Ä—Ç–µ
cat > app.py << 'EOF'
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase
from werkzeug.middleware.proxy_fix import ProxyFix

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key")
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get(
    "DATABASE_URL", 
    "postgresql://hromkz_user:HromKZ_SecurePass2025!@localhost/hromkz_logistics"
)
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}

db.init_app(app)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
with app.app_context():
    import models
    import routes
EOF

print_info "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î..."
cat > init_db.py << 'EOF'
from app import app, db

if __name__ == '__main__':
    with app.app_context():
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.create_all()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
EOF

chown hromkz:www-data app.py init_db.py

print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sudo -u hromkz bash -c 'cd /var/www/logistics.xrom.org && source .env && ./venv/bin/python init_db.py'

print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if sudo -u hromkz bash -c 'cd /var/www/logistics.xrom.org && source .env && ./venv/bin/python -c "from app import app; print(\"Flask app OK\")"'; then
    print_status "Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    exit 1
fi

print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chown -R hromkz:www-data /var/www/logistics.xrom.org
chmod 775 /var/www/logistics.xrom.org
mkdir -p /var/www/logistics.xrom.org/run
chown hromkz:www-data /var/www/logistics.xrom.org/run
chmod 775 /var/www/logistics.xrom.org/run

print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ systemd –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > /etc/systemd/system/hromkz.service << 'EOF'
[Unit]
Description=Hrom KZ Full Logistics System
After=network.target postgresql.service
Requires=postgresql.service

[Service]
User=hromkz
Group=www-data
WorkingDirectory=/var/www/logistics.xrom.org
Environment="PATH=/var/www/logistics.xrom.org/venv/bin"
EnvironmentFile=/var/www/logistics.xrom.org/.env
ExecStart=/var/www/logistics.xrom.org/venv/bin/gunicorn --workers 3 --bind unix:/var/www/logistics.xrom.org/run/hromkz.sock --umask 0007 main:app
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl daemon-reload
systemctl enable hromkz
systemctl start hromkz
systemctl reload nginx

print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
sleep 8

print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
if systemctl is-active --quiet postgresql; then
    print_status "PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "PostgreSQL: –æ—à–∏–±–∫–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if systemctl is-active --quiet hromkz; then
    print_status "–°–µ—Ä–≤–∏—Å hromkz: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ socket —Ñ–∞–π–ª–∞
    if [[ -S "/var/www/logistics.xrom.org/run/hromkz.sock" ]]; then
        print_status "Socket —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        print_error "Socket —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
else
    print_error "–°–µ—Ä–≤–∏—Å hromkz: –æ—à–∏–±–∫–∞"
    print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
    journalctl -u hromkz --no-pager -n 5
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP
print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –æ—Ç–≤–µ—Ç–∞..."
sleep 2
HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" http://logistics.xrom.org || echo "000")

case "$HTTP_CODE" in
    "200")
        print_status "üéâ –£–°–ü–ï–•! –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: http://logistics.xrom.org"
        print_status "–ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        ;;
    "502")
        print_error "HTTP 502 - –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u hromkz -f"
        ;;
    "000")
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        ;;
    *)
        print_error "HTTP –∫–æ–¥: $HTTP_CODE"
        ;;
esac

echo ""
print_info "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:"
echo "  sudo systemctl status hromkz     # –°—Ç–∞—Ç—É—Å"
echo "  sudo journalctl -u hromkz -f     # –õ–æ–≥–∏"
echo "  sudo systemctl restart hromkz    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo ""
print_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://logistics.xrom.org"
echo "  2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
echo "  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL: sudo certbot --nginx -d logistics.xrom.org"